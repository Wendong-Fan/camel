# =========== Copyright 2023 @ CAMEL-AI.org. All Rights Reserved. ===========
# Licensed under the Apache License, Version 2.0 (the “License”);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an “AS IS” BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# =========== Copyright 2023 @ CAMEL-AI.org. All Rights Reserved. ===========

from dataclasses import asdict, dataclass, field
from typing import Any, Dict

from camel.messages.base import BaseMessage
from camel.messages.func_message import FunctionCallingMessage
from camel.typing import OpenAIBackendRole

MESSAGE_TYPES = {
    "BaseMessage": BaseMessage,
    "FunctionCallingMessage": FunctionCallingMessage
}


@dataclass(frozen=True)
class MemoryRecord():
    """
    A basic message storing unit in the CAMEL memory system.
    """
    message: BaseMessage
    role_at_backend: OpenAIBackendRole
    extra_info: Dict[str, str] = field(default_factory=dict)

    @classmethod
    def from_dict(cls, record_dict: Dict[str, Any]):
        """
        Reconstruct a :obj:`MemoryRecord` from the input dict.

        Args:
            record_dict(Dict[str, Any]): A dict generated by :meth:`to_dict`.
        """
        message_cls = MESSAGE_TYPES[record_dict["message"]["__class__"]]
        kwargs: Dict = record_dict["message"].copy()
        kwargs.pop("__class__")
        recons_message = message_cls(**kwargs)
        return cls(
            message=recons_message,
            role_at_backend=record_dict["role_at_backend"],
            extra_info=record_dict["extra_info"],
        )

    def to_dict(self):
        """
        Convert the :obj:`MemoryRecord` to a dict for serialization purpose.
        """
        return {
            "message": {
                "__class__": self.message.__class__.__name__,
                **asdict(self.message)
            },
            "role_at_backend": self.role_at_backend,
            "extra_info": self.extra_info
        }

    def to_openai_message(self):
        """
        Converts the record to an :obj:`OpenAIMessage` object.
        """
        return self.message.to_openai_message(self.role_at_backend.value)
